/** from this 
	 /** Return true if it is a draw (i.e., no more EMPTY cells) */ 
	public boolean isDraw() {
		 
		// TODO: Check whether the game has ended in a draw. 
		// Hint: Use a nested loop (see the constructor for an example). Check whether any of the cells content in the board grid are Player.Empty. If they are, it is not a draw.
		// Hint: Return false if it is not a draw, return true if there are no empty positions left
		   
		

		
	}
/** to this

public boolean isDraw() {
    // Check if there are any empty cells left
    for (int row = 0; row < GameMain.ROWS; ++row) {
        for (int col = 0; col < GameMain.COLS; ++col) {
            if (cells[row][col].getContent() == Player.EMPTY) {
                return false;  // Found an empty cell, game is not a draw
            }
        }
    }
    return true;  // All cells are filled, game is a draw
}

/** from this 
/** Return true if the current player "thePlayer" has won after making their move  */
	public boolean hasWon(Player thePlayer, int playerRow, int playerCol) {
		 // check if player has 3-in-that-row
		if(cells[playerRow][0].content == thePlayer && cells[playerRow][1].content == thePlayer && cells[playerRow][2].content == thePlayer )
			return true; 
		
		 // TODO: Check if the player has 3 in the playerCol.
		 // Hint: Use the row code above as a starting point, remember that it goes cells[row][column] 
		
		
		
		 // 3-in-the-diagonal
		if( cells[0][0].content == thePlayer && cells[1][1].content == thePlayer && cells[2][2].content == thePlayer)
			return true;
		 
		
		// TODO: Check the diagonal in the other direction
		

		
		//no winner, keep playing
		return false;
/** to this 
public boolean hasWon(Player thePlayer, int playerRow, int playerCol) {
    // Check row
    if (cells[playerRow][0].getContent() == thePlayer &&
        cells[playerRow][1].getContent() == thePlayer &&
        cells[playerRow][2].getContent() == thePlayer) {
        return true;
    }
    
    // Check column
    if (cells[0][playerCol].getContent() == thePlayer &&
        cells[1][playerCol].getContent() == thePlayer &&
        cells[2][playerCol].getContent() == thePlayer) {
        return true;
    }
    
    // Check diagonal (top-left to bottom-right)
    if (cells[0][0].getContent() == thePlayer &&
        cells[1][1].getContent() == thePlayer &&
        cells[2][2].getContent() == thePlayer) {
        return true;
    }
    
    // Check diagonal (top-right to bottom-left)
    if (cells[0][2].getContent() == thePlayer &&
        cells[1][1].getContent() == thePlayer &&
        cells[2][0].getContent() == thePlayer) {
        return true;
    }
    
    return false;  // No winning condition found
}
