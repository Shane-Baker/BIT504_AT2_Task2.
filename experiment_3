// From this 
private Board board;
	 	 
	//TODO: create the enumeration for the variable below (GameState currentState)
	//HINT all of the states you require are shown in the code within GameMain
	private GameState currentState; 
	
	// the current player
	private Player currentPlayer; 
	// for displaying game status message
	private JLabel statusBar;       
	
// to this
    /* Declare game object variables */
    private Board board; // the game board

    public enum GameState {
        Playing, Draw, Cross_won, Nought_won
    }
    private GameState currentState; 

    private Player currentPlayer; // the current player
    private JLabel statusBar; // for displaying game status message  

// from this 
	/** Constructor to setup the UI and game components on the panel */
	public GameMain() {   
		
		// TODO: This JPanel fires a MouseEvent on MouseClicked so add required event listener to 'this'.          
	    
	    
		// Setup the status bar (JLabel) to display status message       
		statusBar = new JLabel("         ");       
		statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 14));       
		statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));       
		statusBar.setOpaque(true);       
		statusBar.setBackground(Color.LIGHT_GRAY);  
		
		//layout of the panel is in border layout
		setLayout(new BorderLayout());       
		add(statusBar, BorderLayout.SOUTH);
		// account for statusBar height in overall height
		setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT + 30));
		
		
		// TODO: Create a new instance of the game "Board"class. HINT check the variables above for the correct name

		
		//TODO: call the method to initialise the game board

	}
// to this 
    /** Constructor to setup the UI and game components on the panel */
    public GameMain() {   
                 addMouseListener(this);

        // Setup the status bar (JLabel) to display status message       
        statusBar = new JLabel("         ");       
        statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 14));       
        statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));       
        statusBar.setOpaque(true);       
        statusBar.setBackground(Color.LIGHT_GRAY);  

        // Layout of the panel is in BorderLayout
        setLayout(new BorderLayout());       
        add(statusBar, BorderLayout.SOUTH);
        // Account for statusBar height in overall height
        setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT + 30));

        
        board = new Board();

        
        initGame();
 
// From this 
public static void main(String[] args) {
		    // Run GUI code in Event Dispatch thread for thread safety.
		javax.swing.SwingUtilities.invokeLater(new Runnable() {
	         public void run() {
				//create a main window to contain the panel
				JFrame frame = new JFrame(TITLE);

				
				frame.pack();             
				frame.setLocationRelativeTo(null);
				frame.setVisible(true);
	         }
		 });
	}
// to this
    public static void main(String[] args) {
        // Run GUI code in Event Dispatch thread for thread safety.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                // Create a main window to contain the panel
                JFrame frame = new JFrame(TITLE);

                GameMain gameMainPanel = new GameMain();
                frame.add(gameMainPanel);

                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                frame.pack();             
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }
// From this 
/** Custom painting codes on this JPanel */
	public void paintComponent(Graphics g) {
		//fill background and set colour to white
		super.paintComponent(g);
		setBackground(Color.WHITE);
		//ask the game board to paint itself
		board.paint(g);
		
		//set status bar message
		if (currentState == GameState.Playing) {          
			statusBar.setForeground(Color.BLACK);          
			if (currentPlayer == Player.Cross) {   
			
				//TODO: use the status bar to display the message "X"'s Turn

				
			} else {    
				
				//TODO: use the status bar to display the message "O"'s Turn

				
			}       
			} else if (currentState == GameState.Draw) {          
				statusBar.setForeground(Color.RED);          
				statusBar.setText("It's a Draw! Click to play again.");       
			} else if (currentState == GameState.Cross_won) {          
				statusBar.setForeground(Color.RED);          
				statusBar.setText("'X' Won! Click to play again.");       
			} else if (currentState == GameState.Nought_won) {          
				statusBar.setForeground(Color.RED);          
				statusBar.setText("'O' Won! Click to play again.");       
			}
		}

// to this 
    /** Custom painting codes on this JPanel */
    public void paintComponent(Graphics g) {
        // Fill background and set color to white
        super.paintComponent(g);
        setBackground(Color.WHITE);

        // Ask the game board to paint itself
        board.paint(g);

        // Set status bar message
        if (currentState == GameState.Playing) {          
            statusBar.setForeground(Color.BLACK);          
            if (currentPlayer == Player.Cross) {   
                statusBar.setText("X's Turn");
            } else {    
                statusBar.setText("O's Turn");
            }       
        } else if (currentState == GameState.Draw) {          
            statusBar.setForeground(Color.RED);          
            statusBar.setText("It's a Draw! Click to play again.");       
        } else if (currentState == GameState.Cross_won) {          
            statusBar.setForeground(Color.RED);          
            statusBar.setText("'X' Won! Click to play again.");       
        } else if (currentState == GameState.Nought_won) {          
            statusBar.setForeground(Color.RED);          
            statusBar.setText("'O' Won! Click to play again.");       
        }
    }
// From this
		/**After each turn check to see if the current player hasWon by putting their symbol in that position, 
		 * If they have the GameState is set to won for that player
		 * If no winner then isDraw is called to see if deadlock, if not GameState stays as PLAYING
		 *   
		 */
		public void updateGame(Player thePlayer, int row, int col) {
			//check for win after play
			if(board.hasWon(thePlayer, row, col)) {
				
				// TODO: check which player has won and update the currentstate to the appropriate gamestate for the winner

				
			} else 
				if (board.isDraw ()) {
					
				// TODO: set the currentstate to the draw gamestate

			}
			//otherwise no change to current state of playing
		}

// To this 

    /** After each turn check to see if the current player has won by putting their symbol in that position */
    public void updateGame(Player thePlayer, int row, int col) {
        // Check for win after play
        if (board.hasWon(thePlayer, row, col)) {
            currentState = (thePlayer == Player.Cross) ? GameState.Cross_won : GameState.Nought_won;
        } else if (board.isDraw()) {
            currentState = GameState.Draw;
        }
        // Otherwise, no change to current state of Playing
    }

    /** From this */
	public void mouseClicked(MouseEvent e) {  
	    // get the coordinates of where the click event happened            
		int mouseX = e.getX();             
		int mouseY = e.getY();             
		// Get the row and column clicked             
		int rowSelected = mouseY / CELL_SIZE;             
		int colSelected = mouseX / CELL_SIZE;               			
		if (currentState == GameState.Playing) {                
			if (rowSelected >= 0 && rowSelected < ROWS && colSelected >= 0 && colSelected < COLS && board.cells[rowSelected][colSelected].content == Player.Empty) {
				// move  
				board.cells[rowSelected][colSelected].content = currentPlayer; 
				// update currentState                  
				updateGame(currentPlayer, rowSelected, colSelected); 
				// Switch player
				if (currentPlayer == Player.Cross) {
					currentPlayer =  Player.Nought;
				}
				else {
					currentPlayer = Player.Cross;
				}
			}             
		} else {        
			// game over and restart              
			initGame();            
		}   
		
		//TODO: redraw the graphics on the UI          
           
	}
		
// to this 

    /** Event handler for the mouse click on the JPanel */
    public void mouseClicked(MouseEvent e) {  
        // Get the coordinates of where the click event happened            
        int mouseX = e.getX();             
        int mouseY = e.getY();             
        // Get the row and column clicked             
        int rowSelected = mouseY / CELL_SIZE;             
        int colSelected = mouseX / CELL_SIZE;               

        if (currentState == GameState.Playing) {                
            if (rowSelected >= 0 && rowSelected < ROWS && colSelected >= 0 && colSelected < COLS && 
                board.cells[rowSelected][colSelected].content == Player.Empty) {
                // Move  
                board.cells[rowSelected][colSelected].content = currentPlayer; 
                // Update currentState                  
                updateGame(currentPlayer, rowSelected, colSelected); 
                // Switch player
                currentPlayer = (currentPlayer == Player.Cross) ? Player.Nought : Player.Cross;
            }             
        } else {        
            // Game over and restart              
            initGame();            
        }   
     
        repaint();
    }
